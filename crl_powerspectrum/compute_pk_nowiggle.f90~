!Modified version of Komatsu's CRL function
!(http://www.mpa-garching.mpg.de/~komatsu/crl/)
!compute_mf_pressschechter for CosmoSIS - AM

  ! A sample program for computing the linear power spectrum
  ! of density fluctuations using Eisenstein&Hu's transfer function
  ! without the baryonic oscillation. See Eq.(29) of
  ! Eisenstein & Hu, ApJ, 496, 605 (1998)
  ! - k is in units of h Mpc^-1
  ! - P(k) is in units of h^-3 Mpc^3
  ! January 1, 2012: E.Komatsu


MODULE Compute_Pk_NoWiggle
  USE growth
  USE interface_tools
  USE pk_EisensteinHu
  IMPLICIT none



contains


  subroutine compute_pknowiggle(k_ov_h,A_s,n_s,h0,om0,ob0,pk)
  !  k_ov_h in h Mpc^-1

  real(dl), INTENT(IN) :: k_ov_h,A_s,h0,om0,ob0,n_s
  real(dl),INTENT(INOUT) :: pk
  DOUBLE PRECISION :: trans !! private?
 CALL eisensteinhu(k_ov_h*h0,om0*h0**2d0,ob0/om0,trans)
 ! Eq.(74) of Komatsu et al., ApJS, 180, 330 (2009) with kWMAP=0.002/Mpc
 ! Remember that ak is in units of h/Mpc whereas "k" in Eq.(74) is in units
 ! of 1/Mpc.
 pk=A_s*(2d0*k_ov_h**2d0*2998d0**2d0/5d0/om0)**2d0 &
   *trans**2d0*(k_ov_h*h0/0.002d0)**(n_s-1d0) &
   *2d0*3.14159d0**2d0/k_ov_h**3d0

!  I commented growth_z0**2d0 so you have to put the z dependence by hands.
 end subroutine compute_pknowiggle

!   subroutine compute_pknowiggle()

!   integer :: j
!   double precision :: g,z,D,trans
!   double precision :: k_ov_h,pk,dlnk,lnk,zin
!   double precision :: ob0,h0,ns,run,deltaR2
!   external g
!   character(len=128) :: filename
!   integer :: n
! ! Specify three cosmological parameters
! ! The data type has been defined in MODULE cosmo.
!   ode0=0.723d0
!   om0=0.277d0
!   w=-1d0
! ! Specify four more cosmological parameters
! ! These are not defined in MODULE cosmo.
!   ob0=0.0459d0
!   h0=0.702d0
!   ns=0.962d0
!   run=0d0
!   deltaR2=2.46d-9
! ! tabulate g(z) by calling "setup_growth"
!   call setup_growth
! ! ask for redshift
!   print*,'redshift?'
!   read*,z
!   D=g(z)/(1d0+z) ! linear growth factor, normalized such that (1+z)D(z)=1 during the matter era
! ! now output P(k,z) as a function of k
!   open(1,file='wavenumber_pknowiggle.txt')
!   k_ov_h=1d-4 ! h/Mpc
!   dlnk=2d-2
!   do while (k_ov_h<6d3)
!      CALL eisensteinhu(k_ov_h*h0,om0*h0**2d0,ob0/om0,trans)
!      ! Eq.(74) of Komatsu et al., ApJS, 180, 330 (2009) with kWMAP=0.002/Mpc
!      ! Remember that k_ov_h is in units of h/Mpc whereas "k" in Eq.(74) is in units
!      ! of 1/Mpc.
!      pk=deltaR2*(2d0*k_ov_h**2d0*2998d0**2d0/5d0/om0)**2d0*D**2d0 &
!        *trans**2d0*(k_ov_h*h0/0.002d0)**(ns-1d0+0.5d0*run*dlog(k_ov_h*h0/0.002d0)) &
!        *2d0*3.14159d0**2d0/k_ov_h**3d0
!      write(1,'(2E18.8)')k_ov_h,pk
!      lnk=dlog(k_ov_h)+dlnk
!      k_ov_h=dexp(lnk)
!   enddo
!   close(1)

!   end subroutine compute_pknowiggle

END MODULE Compute_Pk_NoWiggle
