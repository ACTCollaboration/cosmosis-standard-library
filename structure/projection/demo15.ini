; Demonstrate the different angular two-point functions in the standard library
[runtime]
sampler = test

[test]
save_dir=demo_output_15
fatal_errors=T

[pipeline]
modules = consistency smail luminosity_slope camb sigma8_rescale halofit_takahashi no_bias nla  angular_power_2 ;2pt_shear ;2pt_matter 2pt_ggl 2pt_mag
values = values15.ini
; Not used here, becuase we are not sampling
likelihoods =
extra_output =
quiet=F
debug=T
timing=F

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0
zmax = 6.0


; new simple module for using sigma8 as an input instead of A_s
; the only parameter required is the file location
[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

; Works the same as halofit but uses the Takahashi non-linear correction
[halofit_takahashi]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

; Load in a file once at the start when setting up and supply fixed data
; when executed.
[dndz]
file = cosmosis-standard-library/number_density/gaussian_window/gaussian_window.py
z = 1.0
sigma = 0.1

[smail]
file = cosmosis-standard-library/number_density/smail/photometric_smail.py
nbin = 1
zmax = 6.0
dz = 0.005


; The magnification spectrum is sensitive to the slope of the luminosity number
; count function.  This module uses a fitting function for the slope alpha.
[luminosity_slope]
file = cosmosis-standard-library/luminosity_function/Joachimi_Bridle_alpha/interface.py
magnitude_limit = 24.0
binned_alpha = T

[angular_power_2]
file = cosmosis-standard-library/structure/projection/project_2d.py
n_ell = 100
verbose = T
ell_min = 10.0
ell_max = 100000.0

magnification-magnification=T
magnification-shear=T
magnification-position=T
magnification-intrinsic=T
shear-shear=T
position-shear=T
shear-intrinsic=T
position-position=T
position-intrinsic=T
intrinsic-intrinsic=T
cmbkappa-cmbkappa=T
position-cmbkappa=T
shear-cmbkappa=T
intrinsic-cmbkappa=T


[no_bias]
file = cosmosis-standard-library/bias/no_bias/no_bias.py
verbose = T


[nla]
file = cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected
do_galaxy_intrinsic = T

[angular_power]
file = cosmosis-standard-library/shear/spectra/interface.so
n_ell = 100
ell_min = 10.0
ell_max = 100000.0
shear_shear = T
PositionPosition = T

#intrinsic_alignments = F
#matter_spectra = T
#ggl_spectra = T
#gal_IA_cross_spectra = F
#mag_gal_cross_spectra = T
#mag_mag = T

; This module converts angular spectra from c_ell to correlation functions w(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis
[2pt_shear]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = shear_cl
output_section_name = shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 0

[2pt_matter]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = matter_cl
output_section_name = matter_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

[2pt_ggl]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = ggl_cl
output_section_name = ggl_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 2

[2pt_mag]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_magnification_cl
output_section_name = galaxy_magnification_cl
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

