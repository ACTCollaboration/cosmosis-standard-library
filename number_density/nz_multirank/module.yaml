#This is a template for module description files
name: nz_multirank
version: 1
purpose: Load, rank, and sample from a set of density n(z) realisations from a FITS file
url: ""
interface: nz_multirank.py
attribution: Juan P. Cordero, Ian Harrison, Gary Bernstein
rules: "If you use a file from a particular survey you should cite that survey"
cite: []

assumptions:
    - "Realisations are provided in FITS extensions NZ_{NAME}_realisation_{NUMBER} starting with NUMBER=0, in correlated order and without skips"

explanation: |
    "This module is designed to work with the number density part of the FITS
    files described in:
    http://github.com/joezuntz/2point/

    Uncertainty in the redshift distributions is usually described by a nuisance
    parameter which allows the mean of the distribution to be shifted from a fiducial
    central value.
    This value is then marginalized in the pipeline.
    But higher order distribution moments which are not captured by this parameterization
    can propagate into the cosmological parameters and its uncertainty ignored.

    An empirical approach to solve this is to provide multiple realisations of the
    redshift distributions n(z) containing realistic samples of the higher order moments.
    as well as the small redshift scale variance.
    We can then sample from them directly rather than using nuisance to capture the
    full effect of the shapes of the redshift distributions, as well as their internal
    correlation.

    This module extends the load_nz_fits module to read multiple realisations, one per
    extension.
    Using the solutions to the linear sum assignment problem, it generates a uniform
    multidimensional unit map with each dimension mapped to a characteristic of the redshift
    distributions. By default, the module uses the mean redshift of tomographic bins to map the
    distributrions. The used bins can be defined by the user.

    The linear sum assignment is designed to assign the same volume of the map
    to each realisation, ensuring no spurious prior is given to the realisations.
    This generalizes the original nz_hyperrank to higher dimensions to achieve better sampling
    efficiency over the use of a single hyperparameter, which can result in highly degenerated
    ranks.
    The size of the map is automatically determined from the total number of realisations
    and it is optimized to be closest to a square as possible.
    "


# List of parameters that can go in the params.ini file in the section for this module
params:
    nz_file: "String, absolute or relative path to an n(z) file"
    data_set: "String, names of the extensions prefixes in the FITS files to load and save to the block"
    upsampling: "Integer, upsampling factor of the redshift distribution"
    mode: "String; ranking mode, use to define which characteristic values are mapped to the hyperparameter.
      It has to be one of the following: mean, invchi, external"
    saved_stats: "String, path to a numpy array containing a set of characteristics to be used to build de map"
    bin_ranks: "Integer array, which tomographic bins to use to map to the dimensions of the map"
    resume: "Boolean, reads a saved uniform map transformation or saves it if it doesn't exists."
    resume_map: "String, Path to saved uniform map if resume = True"
    dimensions: "Integer, number of dimensions of the uniform map"

inputs:
  ranks:
    rank_hyperparm_i: "Real; hyperparameter mapped to a redshift distribution. If mode is separate, then i = 1...dimensions "

outputs:
    wl_number_density:
        nz: "Integer; number of redshift samples"
        nbin: "Integer; number of bins"
        z: "Real vector; redshift sample values"
        bin_: "Real vector; n(z) at redshift sample values.  bin_1, bin_2, ..."
